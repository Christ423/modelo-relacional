-- Crear base de datos
CREATE DATABASE supermercado3;

-- Seleccionar base de datos
USE supermercado3;

-- Crear tabla Productos
CREATE TABLE Productos (
  id INT PRIMARY KEY,
  nombre VARCHAR(50),
  precio DECIMAL(10,2),
  cantidad INT
);

-- Crear tabla Usuarios
CREATE TABLE Usuarios (
  id INT PRIMARY KEY,
  nombre VARCHAR(50),
  apellido VARCHAR(50),
  correo VARCHAR(50),
  contrasena VARCHAR(50)
);

-- Crear tabla Ventas
CREATE TABLE Ventas (
  id INT PRIMARY KEY,
  fecha DATE,
  usuario_id INT,
  total DECIMAL(10,2),
  FOREIGN KEY (usuario_id) REFERENCES Usuarios(id)
);

-- Crear tabla DetalleVentas
CREATE TABLE DetalleVentas (
  venta_id INT,
  producto_id INT,
  cantidad INT,
  precio DECIMAL(10,2),
  PRIMARY KEY (venta_id, producto_id),
  FOREIGN KEY (venta_id) REFERENCES Ventas(id),
  FOREIGN KEY (producto_id) REFERENCES Productos(id)
);

-- Crear tabla Auditoria
CREATE TABLE Auditoria (
  id INT PRIMARY KEY AUTO_INCREMENT,
  usuario_id INT,
  operacion VARCHAR(255),
  fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (usuario_id) REFERENCES Usuarios(id)
);
-- Crear tabla Informes
CREATE TABLE Informes (
  id INT PRIMARY KEY AUTO_INCREMENT,
  fecha DATE,
  usuario_id INT,
  usuario_nombre VARCHAR(50),
  usuario_apellido VARCHAR(50),
  usuario_correo VARCHAR(50),
  total DECIMAL(10,2),
  comision DECIMAL(10,2),
  FOREIGN KEY (usuario_id) REFERENCES Usuarios(id)
);

-- Crear trigger para mantener actualizado el inventario
DELIMITER $$
CREATE TRIGGER actualizar_inventario AFTER INSERT ON DetalleVentas FOR EACH ROW
BEGIN
  UPDATE Productos SET cantidad = cantidad - NEW.cantidad WHERE id = NEW.producto_id;
END$$
DELIMITER ;

-- Crear trigger para generar informes de auditoría
DELIMITER $$
CREATE TRIGGER generar_informe_auditoria AFTER INSERT ON Ventas FOR EACH ROW
BEGIN
  INSERT INTO Auditoria (usuario_id, operacion) VALUES (NEW.usuario_id, CONCAT('Se realizó una venta por un total de $', NEW.total));
END$$
DELIMITER ;

-- Crear trigger para calcular el valor de la factura con IVA
DELIMITER $$
CREATE TRIGGER calcular_valor_factura BEFORE INSERT ON Ventas FOR EACH ROW
BEGIN
  SET NEW.total = (SELECT SUM(precio * cantidad) FROM DetalleVentas WHERE venta_id = NEW.id) * 1.19;
END$$
DELIMITER ;

-- Crear trigger para generar informes de ventas y comisiones
DELIMITER $$
CREATE TRIGGER generar_informe_ventas_comisiones AFTER INSERT ON Ventas FOR EACH ROW
BEGIN
  DECLARE comision DECIMAL(10,2);
  DECLARE usuario_nombre VARCHAR(50);
  DECLARE usuario_apellido VARCHAR(50);
  DECLARE usuario_correo VARCHAR(50);
  SELECT nombre, apellido, correo INTO usuario_nombre, usuario_apellido, usuario_correo FROM Usuarios WHERE id = NEW.usuario_id;
  SELECT SUM(precio * cantidad * 0.05) INTO comision FROM DetalleVentas WHERE venta_id = NEW.id;
  INSERT INTO Informes (fecha, usuario_id, usuario_nombre, usuario_apellido, usuario_correo, total, comision) VALUES (NEW.fecha, NEW.usuario_id, usuario_nombre, usuario_apellido, usuario_correo, NEW.total, comision);
END$$
DELIMITER ;

INSERT INTO Productos (id, nombre, precio, cantidad) VALUES (1, 'Manzanas', 2.99, 100), (2, 'Plátanos', 1.99, 50), (3, 'Naranjas', 3.99, 75);
INSERT INTO Usuarios (id, nombre, apellido, correo, contrasena) 
VALUES (1, 'Juan', 'Pérez', 'juan.perez@example.com', 'contrasena123');
INSERT INTO Ventas (id, fecha, usuario_id, total) VALUES (1, '2023-03-24', 1, 50.00);
INSERT INTO DetalleVentas (venta_id, producto_id, cantidad, precio) VALUES (1, 1, 10, 2.99), (1, 3, 5, 3.99);
- Insertar venta
INSERT INTO Ventas (id, fecha, usuario_id, total) VALUES (3, '2023-03-24', 1, 100.00);

-- Insertar detalle de venta
INSERT INTO DetalleVentas (venta_id, producto_id, cantidad, precio) VALUES (3, 1, 2, 25.00);
INSERT INTO DetalleVentas (venta_id, producto_id, cantidad, precio) VALUES (3, 2, 1, 50.00);

-- El trigger calcular_valor_factura actualizará el valor de la venta con el IVA incluido
SELECT * FROM Ventas WHERE id = 3;




